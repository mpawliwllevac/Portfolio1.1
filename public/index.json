[{"categories":null,"contents":"I’m a budding data analyst with experience in R for statistical programming, knowledge mobilization, academic publication and presentation of data to people with a non-research background. I also have numerous hobbies including: origami, and board games. Currently my goal is expanding my portfolio. I love looking at the world and using tools like R to help analyze and understand the things around me.\nAs part of my education I spent time working with a school board where I got my first real taste of applied data science and have since fallen in love with it. I’ve worked with multiple academic labs and the Grand Erie District School Board, assisting in the implementation and analysis of their student census. I’m also very interested in origami and game design.\n","permalink":"/about/","tags":null,"title":"About Me"},{"categories":["R","My understanding"],"contents":"\r\rIn today's post I want to go over RInno for deploying Shiny apps to desktop as well as the benefits and how to get it all going. The My Understanding series is my attempt at writing concise guides for my future self on how to do complicated or infrequent jobs. The RInno package allows for installation of shiny apps onto computers acting as a bridge between R, Inno Setup, windows installers and Electron. This provides an alternative deployment solution to potentially IT heavy processes like Docker or running a Shiny server. I've really enjoyed working with Rinno and wanted to expand on the set-up process.\nIn general if you're looking to utilize Rinno as a deployment strategy for Shiny apps I'm going to assume that you have some experience with them. Additionally, I found myself having to use R 3.6.3 as the package has not been updated to the newest versions of R. For best reproducibility I recommend using this version (it really doesn't like version 4).\nGetting Started\rI ran into problems when initially attempting to install Rinno apparently due to using a 64bit OS. I eventually figured out what to do based on an issue on the github. This is how we get Rinno onto our computer instead of a normal install.packages() call.\n#install.packages(\u0026#39;installr\u0026#39;)\rrequire(installr)\rinstall.inno(quick_start_pack = TRUE)\rlibrary(Rinno)\r\rManual Function Update\rAs mentioned earlier RInno at the time of writing hasn't been updated to cooperate with version 4 of R and onwards. Normally this may not be a problem but here it is, as the functions we'll be using later need to know what the most current version of R is. The solution I found, sourced again from the github is that we manually update the get_R() function to make sure its knows R version 4.0 and up exists. The downside to this solution is that it's temporary and needs to be done every session. We use trace() to pull up the definition of get_R() and replace the instances of \u0026quot;1-3\u0026quot; with \u0026quot;1-4\u0026quot; since right now it only looks for versions of R that start with 1-3.\ntrace(get_R,edit=T)\r#Affected sections:\r# latest_R_version \u0026lt;- readLines(\u0026quot;https://cran.rstudio.com/bin/windows/base/\u0026quot;,\r# warn = F) %\u0026gt;% stringr::str_extract(\u0026quot;[1-3]\\\\.[0-9]+\\\\.[0-9]+\u0026quot;) %\u0026gt;%\r# stats::na.omit() %\u0026gt;% unique()\r# old_R_versions \u0026lt;- readLines(\u0026quot;https://cran.rstudio.com/bin/windows/base/old/\u0026quot;,\r# warn = F) %\u0026gt;% stringr::str_extract(\u0026quot;[1-3]\\\\.[0-9]+\\\\.[0-9]+\u0026quot;)\r\rMaking an Example Installer\rThe RInno package includes everything we need to make a quick example if you don't have a shiny app on hand. This is also what we'll be using here. It’s a simple function to generate the example app, after that we'll create the app, then lastly, compile it. You will likely want to observe your working directory after running each line of code so you can see what things are being added or changed.\nexample_app(app_dir = \u0026quot;app\u0026quot;) create_app(app_name = \u0026quot;myapp\u0026quot;, app_dir = \u0026quot;app\u0026quot;)\rcompile_iss()\rThere are a large number of arguments to create_app() that can be (found here)[https://www.ficonsulting.com/filabs/RInno] and include things like: including company information, password protection, including R and/or packages in the installation, changing the icons, and custom messaging among other things. Once the folder has been compiled we've got our installer. This is what we would give to anyone who was installing our app.\n\rFinal Checks and Final Errors\rNow we're going to give a quick check that it works by installing it on our own computer. In the apps folder (in our example its \u0026quot;app\u0026quot;) there's a lot more stuff now. The installer is in the Rinno_installer folder and will have the name setup_app (or whatever the app's name is).\nYou can install the app like you would any normal program. One thing of note is that the app will throw an error whenever it tries to create icons or shortcuts, meaning 1-2 errors at the end of installation. These errors simply inform you that these shortcuts were not created. I have no idea how to avoid these errors, if you find a way please let me know. But, once clicking through the errors we should be able to launch the app; either from the end of the installer or from where the app was installed (by default its in the Documents folder). Once the app opens up you'll be able to see the final result and that will be the birth of your app!\n\rOther Resources\rThere's a lot more you can do with Rinno so you can check out these extra resources. I was unable to find any sort of tutorials other than the minimal example provided by the publisher but it shows a lot of the customizability of Rinno that I only glossed over here.\nRInno project website https://www.ficonsulting.com/filabs/RInno\nRInno project github https://github.com/ficonsulting/RInno\nShiny meets Electron: Turn your Shiny app into a standalone desktop app in no time https://youtu.be/ARrbbviGvjc\n\r","permalink":"/post/my-understanding-of-rinno/","tags":["blogdown","shiny","deployment"],"title":"My Understanding of RInno"},{"categories":["R","I Generated"],"contents":"\rThis is a thing I made: https://mpawliw-levac.shinyapps.io/potionmaster/\n\rWhy did I make it?\nI've spent some time at a school board and was looking to emulate a little bit of what they had. Specifically, the dashboards that were being used.\nWhat did I make?\nWhat I made is a sample dashboard that could be used by a teacher or school staff to help gain deeper knowledge about their students. This could help a teacher potentially see patterns that they wouldn't have been able to otherwise that they can then adjust their teaching for.\nCurrently the dashboard lets a user filter (sample) students based on a number of different categories. Province and race are selectable but expanding the system into any areas that data exist for would be very simple following this template. Other data that could be included could be disciplinary action, report card, other classes taken, grades or any other demographic data. The selected data is then presented in a number of useful plots and tables; with the class average and distribution of grades up front and center. There's also a tab containing the breakdown of grades by assignment, adding even more granularity. Lastly the raw data is available for viewing in the last tab in a nice DT table.\nWhy I Think It's Cool?\n\rI'm proud because its my first real shiny app. There's lots of customizability but also lots of room for improvement.\rThe granularity of being able to see how groups and combinations of groups are performing.\rIts easy to see things at a glance but also allows for fine tuning.\rI'm very happy how the violin/boxplots plots turned out.\rIt is very feasible to set up the app for multiple classes or expanding on the data coming into the system.\r\rLimitations or Problems\n\rNaN when there's no data selected\n\rPotential for overwhelming number of selectable categories depending on data (solution has been found but just not implemented here)\n\rImproving the class avg box. There's a lot that could be done to improve the box but it wasn't worth the time investment for such minor changes.\n\rSummary data having tables of varying length makes them not look as good as they could be. This would also cause problems if there was more than one row of tables.\n\rI was unable to decide between histogram and density plot given the limitations of each and ended up opting to include both as separate plots.\r\rRaw code available here\n","permalink":"/post/i-generated-the-potionmaster-teacher-s-dashboard/","tags":["shiny","deployment","dashboard","buttons"],"title":"I Generated the Potionmaster Teacher's Dashboard"},{"categories":["R","My understanding"],"contents":"\rAs seems to be Blogdown tradition my first blog post using blogdown is a quick and dirty guide for getting a blogdown site off the ground. The My Understanding of series is my attempt at writing concise guides for my future self on how to do complicated or infrequent jobs. This page is about creating a website using Blogdown from scratch, which I've always found to be a very obtuse process that frequently runs into errors not explained in tutorials/guides. I don't plan on explaining the benefits of blogdown (though look here for that https://bookdown.org/yihui/blogdown/ ) or comparing blogdown to other ways to make website. I'm fairly sure there are objectively easier ways to make a blog or website than using blogdown UNLESS your site is about R. I will also not be demonstrating how to add content or customize the site on this page. If it ends up such that you do not feel like this guide has been completely helpful I have a resources section at the bottom with other tutorials and information about blogdown. I myself used other tutorials to make this happen in the first place. If you happen to not be me there are a few things that one should already know how to do before starting this process. The most important of which is already having a solid understanding of R and R Studio. Other than that its mostly making online acounts and pressing buttons.\nGetting the Blogdown Package\rAquiring the blogdown package is as simple as aquiring any R package install.packages(\u0026quot;blogdown\u0026quot;). You will be asked if you want to install Hugo, say yes because hugo is important. One thing of note is that installing blogdown will give a shiny new 'addins' button with many of the blogdown function (serve site, new post, etc) that you can use as an alternative to running commands.\n#code used:\rinstall.packages(\u0026quot;blogdown\u0026quot;)\r\rCreating a Local Site\rOnce blogdown is installed we're going to make a new R studio project. When starting the project in a new/existing directory under 'project type' you'll be able to select 'website using blogdown'. When the project files are created it'll come with a config.toml file that you can make changes to to customize your site.\n1of5 2of5 3of5 4of5 5of5 This demo site is what we'll be launching to the internet (I'll explain in another page how to add content and such). We're also going to need this package loaded so library() from the terminal. But when we made the site nothing happened, we have to serve the site, with blogdown::serve_site() which can be done from the addin menu or console. This will open up the site for us to explore in the file viewer (I increased the size of my viewer for visibility). Right now it just has a couple of demo posts but I'm sure you have some great ideas of how you can add to that. Right now the site only exists on our computer so we've got some work to do before it can be seen by everyone.\nlibrary(blogdown)\rblogdown::serve_site()\r1of2 2of2 \rHave Github\rFor this step you'll be going to https://github.com/ and making an acount with them. This is how we'll be getting the site files off of your computer and accessible to the internet (for netlify)\n\r\rUpload Your Site to Github\rNow according to most of the tutorials I looked at this is supposed to be a pretty simple process. However they seem to have left out some steps that caused me problems. I will be mentioning these problems as well as how I managed to evenually kill the problems.\nOur first step is to get your existing local site onto github by making a new empty repository on github (you don't need a readme or gitignore to start). When you create a new repository there's no need to adjust options beyond the name. After creating the repository it brings to several options such as \u0026quot;quick setup\u0026quot;, \u0026quot;creating the new repository on the command line\u0026quot;, \u0026quot;pushing an existing repository from the command line\u0026quot;, or \u0026quot;importing code from another repository\u0026quot;. The option that we will care about is creating the new repository on the command line. It may be convienent for you to copy/paste the code shown on github into a safe notepad or similar location.\n1of3 2of3 3of3 Using this code will require us to be on the command line though. You can get there from the start menu and typing 'cmd' into the search bar (unsure of directions on non-windows). This is where I ran into my first real problem in that the code shown on github wouldn't run. If you, like me are getting an error along the lines of \u0026quot;git command does not exist\u0026quot; then your computer does not have git installed (easy test is typing \u0026quot;git init\u0026quot; into the command line). That's ok though, we can fix it! The steps to getting this working are: 1) download and install git; 2) add git to the computers PATH variables.\n\rInstalling Git\rSo our next step is to install git, there's nothing special about the installation and it can just be clicked through. You can download Git from this link https://git-scm.com/downloads . There are many options during the installation process and no changes from the defaults are necessary (unless your computer needs them for some reason).\n\r\rAdding git to the computers PATH variables\rNext, we'll be adding git to the computers PATH variables. I won't be going over that in detail here as it would just be a copy/paste of this guide ( https://git-scm.com/downloads ) but for my own records the button order is:\n\rcontrol panel\rsystem\radvanced system settings\radvanced tab\renvironment variables\rpath -\u0026gt; edit\rnew -\u0026gt; \u0026quot;;\u0026quot; and paste the path to the Git CMD file (eg ;C:Files-bash.exe ). Shft+R click will have a \u0026quot;copy as path\u0026quot; option though you'll have to remove \u0026quot;\u0026quot;\rIf you had the cmd window open already, close it then open it again.\rDone!\r\r\rUpload your site to github, for real this time\rHere's the general code for using the git commands to upload your site. Of note is that after you attempt your first commit you will be asked for your github username and email (these can be provided with the commands git config -- global user.email \u0026quot;you@example.com\u0026quot;, replacing email with user for the other). Additionally, the code provided below has 1 difference to the quick set up code. That difference is git add . to add everything in our project folder to our commit, and is indicated by the comment with #####.\n#rememeber that despite this showing up as R code its going on the command line\r#these user specific paths would also be made for you if you have the code from cd the_path_to_your_project_folder #eg C:\\Users\\matth\\Dropbox\\R Working Directory\\Demo Site\recho \u0026quot;# [repositoryname]\u0026quot; \u0026gt;\u0026gt; README.md #eg # Demo-Site\rgit init\rgit add README.md #this will add a readme file. you\u0026#39;ll only need to add this once\rgit add . #####the period indicates everything in the folder\rgit commit -m \u0026quot;first commit\u0026quot; #the quotes can be anything and are what you\u0026#39;re calling this particular commit. its useful to keep it organized\rgit remote add origin {url for the repository} #eg https://github.com/username/Demo-Site.git git push -u origin master\r1of9 2of9 3of9 4of9 5of9 6of9 7of9 8of9 9of9 Once you've pushed to the master branch you can refresh the webpage with the repository and the files should all be there. This means that you've successfully uploaded your website to github. This was a hardest step. All that's left is Netlify so that the whole world can see what you've made!\n\r\rHave Netlify\rFor this step you'll be going to www.netlify.com and making an account with them. This is how we'll be deploying our website.\n\r\rBuild Netlify Site Deploying From Github\rWe're in the home stretch. This part is largely pushing buttons so here's the list of buttons after you've got your account.\n\rSites tab\n\rnew site from git\n\rgithub as the git provider\n\rauthorize netlify into your github\n\rselect the repository you've made for your website (the one you were committing files to earlier)\n\r'show advanced' build settings\n\rnew variable\n\rKey: HUGO_VERSION\n\rValue: 0.53\r\r1of7 2of7 3of7 4of7 5of7 6of7 7of7 You'll be taken to a new page saying that the deployment of your website is happening. This is it. Your site is being birthed onto the internet. Assuming the deploy works you'll be able to click on the link for your site which will be something like https://nonsense-numbers.netlify.app and you'll be able to see your website on the internet. Check from your phone, its really cool to be able to see the fruit of what you did.\nNow if you don't want random giberish as your website url you can fix it (without purchasing a custom domain). We got some more buttons:\n\rstart on the overview tab of your brand new shiny website (this is also where netlify drops you after making the site)\rsite settings\rUnder site details, then under site information -\u0026gt; \u0026quot;change site name\u0026quot;\rCange it to whatever you want. It'll still end in '.netlify.app' though\r\r1of3 2of3 3of3 And that's it. You're done!\n\rResources\rThis is a bonus section and has a bunch of resources and tutorials on blogdown in case people don't find this site helpful. If you find that I missed something please let me know.\nTutorials\r\rCreate a Website with R Studio in 15 Minutes! by Nathaniel Raley Woodward\rHow to make a personal academic website for free using R and the blogdown package by Daniel Quintana\rHow to build a website with Blogdown in R by Martin Frigaard\r\r\rOther resources on blogdown\rTHE book on Blogdown by: Yihui Xie, Amber Thomas, Alison Presmanes Hill\nUp \u0026amp; Running with Blogdown by Alison Hill\n\r\r","permalink":"/post/my-understanding-of-blogdown-github/","tags":["blogdown","deployment","github","netlify"],"title":"My Understanding of Blogdown \u0026 Github"}]